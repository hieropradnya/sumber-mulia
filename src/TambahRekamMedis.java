/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import javax.swing.JOptionPane;
import java.sql.*;
import Database.DbConnection;

/**
 *
 * @author Hiero Nimus
 */
public class TambahRekamMedis extends Template {
    String nama, gejala, poli, dokter, id_dokter;

    /**
     * Creates new form TambahRekamMedis
     */
    public TambahRekamMedis() {
        initComponents();
        
        koneksi = new DbConnection();
        conn = koneksi.getConnection();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonTambah = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldNama = new javax.swing.JTextField();
        jTextFieldGejala = new javax.swing.JTextField();
        jComboBoxPoli = new javax.swing.JComboBox<>();
        jComboBoxDokter = new javax.swing.JComboBox<>();
        jButtonKembali = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nama Pasien");

        jLabel2.setText("Gejala");

        jLabel3.setText("Poli");

        jLabel4.setText("Dokter");

        jButtonTambah.setText("Tambah");
        jButtonTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTambahActionPerformed(evt);
            }
        });

        jButtonReset.setText("Reset");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setText("Tambah Rekam Medis");

        jTextFieldNama.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldNamaFocusLost(evt);
            }
        });

        jComboBoxPoli.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih poli untuk menentukan dokter", "Umum", "Gigi" }));
        jComboBoxPoli.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxPoliItemStateChanged(evt);
            }
        });

        jComboBoxDokter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih poli terlebih dahulu" }));

        jButtonKembali.setText("Kembali");
        jButtonKembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKembaliActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(144, 144, 144))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonKembali)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonReset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonTambah))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(71, 71, 71)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldGejala)
                            .addComponent(jComboBoxPoli, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxDokter, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextFieldNama, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(79, 79, 79))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldGejala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxPoli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxDokter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonTambah)
                    .addComponent(jButtonReset)
                    .addComponent(jButtonKembali))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        // TODO add your handling code here:
        clearForm();
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void jButtonTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTambahActionPerformed
        // TODO add your handling code here:
        if (checkNama()&& checkPoli() && checkDokter()) {
            // Jika semua kondisi terpenuhi, tambahkan data
            nama = jTextFieldNama.getText();
            gejala = jTextFieldGejala.getText();
            poli = jComboBoxPoli.getSelectedItem().toString();
            dokter = jComboBoxDokter.getSelectedItem().toString();
            
            setIdDokter();
            insertData();
            clearForm();

        } else{
            JOptionPane.showMessageDialog(rootPane, "Masukkan data dengan benar!");
        }  
    }//GEN-LAST:event_jButtonTambahActionPerformed

    private void jTextFieldNamaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNamaFocusLost
        // TODO add your handling code here:
        if (!checkNama()) {
            JOptionPane.showMessageDialog(rootPane, "Nama hanya boleh terdiri dari huruf!");
        }
    }//GEN-LAST:event_jTextFieldNamaFocusLost

    private void jComboBoxPoliItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxPoliItemStateChanged

        setDokter();
    }//GEN-LAST:event_jComboBoxPoliItemStateChanged

    private void jButtonKembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKembaliActionPerformed
        // TODO add your handling code here:
        keMenu();
    }//GEN-LAST:event_jButtonKembaliActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TambahRekamMedis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TambahRekamMedis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TambahRekamMedis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TambahRekamMedis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TambahRekamMedis().setVisible(true);
            }
        });
    }
    
    
    private boolean checkNama() {
            nama = jTextFieldNama.getText();
            boolean isValidNama = nama.matches("[a-zA-Z\\s]+");
            return isValidNama;
    }
    private boolean checkPoli() {
        String selectedPoli = jComboBoxPoli.getSelectedItem().toString();
        if ("Pilih poli untuk menentukan dokter".equals(selectedPoli)) {
            return false;
        }
        return true;
    }        
    
    private boolean checkDokter() {
        String selectedDokter = jComboBoxDokter.getSelectedItem().toString();
        if ("Pilih dokter".equals(selectedDokter)) {
            return false;
        }
        return true;
    }   
    
    private boolean insertData(){
        try{
            stmt = conn.createStatement();
            int insert = stmt.executeUpdate("INSERT INTO rekam_medis(pasien_nama, gejala, dokter_id) VALUES('" + 
                    nama + "', '" + gejala + "', '" + id_dokter + "')");
            if(insert == 1){
                JOptionPane.showMessageDialog(rootPane, "Data tersimpan.");
            }
            return true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Kesalahan SQL: " + ex.getMessage());
        }
        return false;
    }
    
    private void clearForm(){
        jTextFieldNama.setText("");
        jTextFieldGejala.setText("");
        jComboBoxPoli.setSelectedIndex(0);
        jComboBoxDokter.setSelectedIndex(0);
    }
    
    private void setDokter() {
        String selectedPoli = jComboBoxPoli.getSelectedItem().toString();

        if (!"Pilih poli untuk menentukan dokter".equals(selectedPoli)) {
            String query = "SELECT nama FROM dokter WHERE poli = '" + selectedPoli + "'";

            try {
                stmt = conn.createStatement();
                rs = stmt.executeQuery(query);

                jComboBoxDokter.removeAllItems();
                jComboBoxDokter.addItem("Pilih dokter");

                while (rs.next()) {
                    jComboBoxDokter.addItem(rs.getString("nama"));
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, "Kesalahan SQL: " + ex.getMessage());
            }
        } else {
            jComboBoxDokter.removeAllItems();
            jComboBoxDokter.addItem("Pilih poli terlebih dahulu");
        }
    }
    
    private void setIdDokter() {
        String selectedDokter = jComboBoxDokter.getSelectedItem().toString();

        String query = "SELECT dokter_id FROM dokter WHERE nama = '" + selectedDokter + "'";

        try {
            stmt = conn.createStatement();
            rs = stmt.executeQuery(query);

            if (rs.next()) {
                id_dokter = rs.getString("dokter_id");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Tidak dapat menemukan ID dokter untuk " + selectedDokter);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Kesalahan SQL: " + ex.getMessage());
        }
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonKembali;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonTambah;
    private javax.swing.JComboBox<String> jComboBoxDokter;
    private javax.swing.JComboBox<String> jComboBoxPoli;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextFieldGejala;
    private javax.swing.JTextField jTextFieldNama;
    // End of variables declaration//GEN-END:variables
}
